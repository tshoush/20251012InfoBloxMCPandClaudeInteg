#!/usr/bin/env python
"""
Interactive Configuration Helper
Prompts users for missing environment variables and optionally saves to .env
"""

import os
import sys
import getpass
from pathlib import Path
from typing import Dict, Optional

class Colors:
    RESET = '\033[0m'
    BOLD = '\033[1m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    CYAN = '\033[36m'
    BRIGHT_CYAN = '\033[96m'
    BRIGHT_GREEN = '\033[92m'
    BRIGHT_YELLOW = '\033[93m'
    BRIGHT_WHITE = '\033[97m'


def print_header():
    """Print configuration header"""
    print()
    print(f"{Colors.BRIGHT_CYAN}{'‚ïê' * 70}{Colors.RESET}")
    print(f"{Colors.BRIGHT_WHITE}{' ' * 15}üîß Configuration Setup{' ' * 15}{Colors.RESET}")
    print(f"{Colors.BRIGHT_CYAN}{'‚ïê' * 70}{Colors.RESET}")
    print()
    print(f"{Colors.BRIGHT_WHITE}This script requires environment variables to connect to InfoBlox{Colors.RESET}")
    print(f"{Colors.BRIGHT_WHITE}and Claude AI. Let's set them up!{Colors.RESET}")
    print()


def prompt_for_value(name: str, description: str, default: Optional[str] = None, is_password: bool = False) -> str:
    """Prompt user for a configuration value"""

    prompt_text = f"{Colors.YELLOW}{name}{Colors.RESET}"
    if description:
        print(f"{Colors.CYAN}  {description}{Colors.RESET}")

    if default:
        prompt_text += f" [{Colors.BRIGHT_WHITE}{default}{Colors.RESET}]"

    prompt_text += ": "

    if is_password:
        value = getpass.getpass(prompt_text)
    else:
        value = input(prompt_text).strip()

    if not value and default:
        return default

    return value


def get_interactive_config() -> Dict[str, str]:
    """Interactively prompt for all required configuration values"""

    print_header()

    config = {}

    # InfoBlox Host
    print(f"{Colors.BRIGHT_GREEN}InfoBlox Configuration{Colors.RESET}")
    print(f"{Colors.BRIGHT_CYAN}{'‚îÄ' * 70}{Colors.RESET}")
    print()

    config['INFOBLOX_HOST'] = prompt_for_value(
        "InfoBlox Host",
        "Hostname or IP address of your InfoBlox server",
        "192.168.1.224"
    )

    config['INFOBLOX_USER'] = prompt_for_value(
        "InfoBlox Username",
        "Username for InfoBlox authentication",
        "admin"
    )

    config['INFOBLOX_PASSWORD'] = prompt_for_value(
        "InfoBlox Password",
        "Password for InfoBlox authentication",
        is_password=True
    )

    config['WAPI_VERSION'] = prompt_for_value(
        "WAPI Version",
        "InfoBlox WAPI version (press Enter for default)",
        "v2.13.1"
    )

    config['INFOBLOX_VERIFY_SSL'] = prompt_for_value(
        "Verify SSL",
        "Verify SSL certificates (true/false, or path to CA bundle)",
        "false"
    )

    print()
    print(f"{Colors.BRIGHT_GREEN}Claude AI Configuration{Colors.RESET}")
    print(f"{Colors.BRIGHT_CYAN}{'‚îÄ' * 70}{Colors.RESET}")
    print()

    config['ANTHROPIC_API_KEY'] = prompt_for_value(
        "Anthropic API Key",
        "Your Claude API key (starts with sk-ant-...)",
        is_password=True
    )

    print()
    print(f"{Colors.BRIGHT_GREEN}Optional Configuration{Colors.RESET}")
    print(f"{Colors.BRIGHT_CYAN}{'‚îÄ' * 70}{Colors.RESET}")
    print()

    config['LOG_LEVEL'] = prompt_for_value(
        "Log Level",
        "Logging verbosity (DEBUG, INFO, WARNING, ERROR)",
        "INFO"
    )

    return config


def save_to_env_file(config: Dict[str, str], env_path: Path = None) -> bool:
    """Save configuration to .env file"""

    if env_path is None:
        env_path = Path.cwd() / ".env"

    try:
        # Check if .env already exists
        if env_path.exists():
            print()
            print(f"{Colors.YELLOW}‚ö† .env file already exists at: {env_path}{Colors.RESET}")
            response = input(f"{Colors.YELLOW}Overwrite? (yes/no) [{Colors.BRIGHT_WHITE}no{Colors.RESET}]: ").strip().lower()
            if response not in ['yes', 'y']:
                print(f"{Colors.YELLOW}‚úó Configuration not saved{Colors.RESET}")
                return False

            # Backup existing .env
            backup_path = env_path.with_suffix('.env.backup')
            env_path.rename(backup_path)
            print(f"{Colors.GREEN}‚úì Backed up existing .env to: {backup_path}{Colors.RESET}")

        # Write new .env file
        with open(env_path, 'w') as f:
            f.write("# InfoBlox MCP & Claude Integration - Configuration\n")
            f.write("# Generated by interactive setup\n\n")

            f.write("# InfoBlox Configuration\n")
            f.write(f"INFOBLOX_HOST={config['INFOBLOX_HOST']}\n")
            f.write(f"INFOBLOX_USER={config['INFOBLOX_USER']}\n")
            f.write(f"INFOBLOX_PASSWORD={config['INFOBLOX_PASSWORD']}\n")
            f.write(f"WAPI_VERSION={config['WAPI_VERSION']}\n")
            f.write(f"INFOBLOX_VERIFY_SSL={config['INFOBLOX_VERIFY_SSL']}\n\n")

            f.write("# Claude AI Configuration\n")
            f.write(f"ANTHROPIC_API_KEY={config['ANTHROPIC_API_KEY']}\n\n")

            f.write("# Logging Configuration\n")
            f.write(f"LOG_LEVEL={config['LOG_LEVEL']}\n")

        # Set restrictive permissions (600 - owner read/write only)
        env_path.chmod(0o600)

        print()
        print(f"{Colors.BRIGHT_GREEN}‚úì Configuration saved to: {env_path}{Colors.RESET}")
        print(f"{Colors.CYAN}  File permissions set to 600 (owner read/write only){Colors.RESET}")
        return True

    except Exception as e:
        print()
        print(f"{Colors.YELLOW}‚úó Error saving .env file: {e}{Colors.RESET}")
        return False


def set_environment_variables(config: Dict[str, str]):
    """Set environment variables for current session"""
    for key, value in config.items():
        os.environ[key] = value

    print()
    print(f"{Colors.BRIGHT_GREEN}‚úì Environment variables set for current session{Colors.RESET}")


def prompt_and_configure() -> Dict[str, str]:
    """Main function to prompt for configuration and optionally save"""

    config = get_interactive_config()

    print()
    print(f"{Colors.BRIGHT_CYAN}{'‚ïê' * 70}{Colors.RESET}")
    print(f"{Colors.BRIGHT_WHITE}Configuration Summary{Colors.RESET}")
    print(f"{Colors.BRIGHT_CYAN}{'‚ïê' * 70}{Colors.RESET}")
    print()
    print(f"{Colors.GREEN}InfoBlox Host:{Colors.RESET} {config['INFOBLOX_HOST']}")
    print(f"{Colors.GREEN}InfoBlox User:{Colors.RESET} {config['INFOBLOX_USER']}")
    print(f"{Colors.GREEN}InfoBlox Password:{Colors.RESET} {'*' * len(config['INFOBLOX_PASSWORD'])}")
    print(f"{Colors.GREEN}WAPI Version:{Colors.RESET} {config['WAPI_VERSION']}")
    print(f"{Colors.GREEN}Verify SSL:{Colors.RESET} {config['INFOBLOX_VERIFY_SSL']}")
    print(f"{Colors.GREEN}API Key:{Colors.RESET} {config['ANTHROPIC_API_KEY'][:15]}...")
    print(f"{Colors.GREEN}Log Level:{Colors.RESET} {config['LOG_LEVEL']}")
    print()

    # Ask if user wants to save to .env
    response = input(f"{Colors.YELLOW}Save configuration to .env file? (yes/no) [{Colors.BRIGHT_WHITE}yes{Colors.RESET}]: ").strip().lower()

    if not response or response in ['yes', 'y']:
        save_to_env_file(config)
    else:
        print(f"{Colors.YELLOW}Configuration not saved. Setting for current session only.{Colors.RESET}")

    # Set environment variables for current session
    set_environment_variables(config)

    print()
    print(f"{Colors.BRIGHT_GREEN}‚úì Setup complete! You can now use the chat interfaces.{Colors.RESET}")
    print()

    return config


def check_and_prompt_if_needed():
    """Check if configuration exists, prompt if not"""

    required_vars = [
        'INFOBLOX_HOST',
        'INFOBLOX_USER',
        'INFOBLOX_PASSWORD',
        'ANTHROPIC_API_KEY'
    ]

    missing_vars = [var for var in required_vars if not os.environ.get(var)]

    if missing_vars:
        print()
        print(f"{Colors.YELLOW}‚ö† Missing required environment variables:{Colors.RESET}")
        for var in missing_vars:
            print(f"{Colors.YELLOW}  - {var}{Colors.RESET}")
        print()

        response = input(f"{Colors.BRIGHT_CYAN}Would you like to configure them now? (yes/no) [{Colors.BRIGHT_WHITE}yes{Colors.RESET}]: ").strip().lower()

        if not response or response in ['yes', 'y']:
            return prompt_and_configure()
        else:
            print()
            print(f"{Colors.YELLOW}Configuration cancelled. Please set environment variables manually:{Colors.RESET}")
            print()
            print(f"  export INFOBLOX_HOST=\"your-host\"")
            print(f"  export INFOBLOX_USER=\"your-username\"")
            print(f"  export INFOBLOX_PASSWORD=\"your-password\"")
            print(f"  export ANTHROPIC_API_KEY=\"sk-ant-...\"")
            print()
            sys.exit(1)

    return None


if __name__ == '__main__':
    """Run interactive configuration"""
    prompt_and_configure()
